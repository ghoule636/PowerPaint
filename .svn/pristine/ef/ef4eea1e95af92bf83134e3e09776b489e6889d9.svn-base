/*
 *TCSS 305 - Spring 2015
 *Assignment 5 - PowerPaint
 */

package view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.geom.Line2D;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JPanel;

import model.Drawing;
import model.Pencil;
import model.Tool;

/**
 *This panel represents the canvas that the user will draw upon while using PowerPaint.
 *
 *@author Gabriel Houle
 *@version 5/20/15
 */
public class PaintDrawPanel extends JPanel {
    
    /**
     *The background color of the panel.
     */
    public static final Color BACKGROUND_COLOR = Color.WHITE;
    
    /**
     *The amount of spacing between every grid line.
     */
    public static final int GRID_SPACING = 10;

    /**
     *Stores the preferred width of the panel.
     */
    private static final int WIDTH = 400;

    /**
     *Stores the preferred height of the panel.
     */
    private static final int HEIGHT = 200;
    
    /**
     *This represents the current tool being used to paint on the panel.
     */
    private Tool myCurrentTool;
    
    /**
     *Stores the current color being used.
     */
    private Color myColor;

    /**
     *Stores the current width used to draw.
     */
    private int myWidth;
    
    /**
     *Stores all the shapes that are created by the user.
     */
    private final List<Drawing> myDrawingArray;
    
    /**
     *True if the grid should be drawn, false otherwise.
     */
    private boolean myGrid;
    
    /**
     *Counts how many times the user has clicked undo.
     */
    private int myUndoCount;
    
    private Drawing myCurrentShape;
    
    /**
     *Create the panel.
     */
    public PaintDrawPanel() {

        super();
        setTool(new Pencil(this));
        myGrid = false;
        myColor = Color.BLACK;
        myWidth = 1;
        myUndoCount = 0;
        myDrawingArray = new ArrayList<Drawing>();
        setPreferredSize(new Dimension(WIDTH, HEIGHT));
        setBackground(BACKGROUND_COLOR);
        setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
    }
    
    /**
     * Paints the current path.
     * 
     * @param theGraphics The graphics context to use for painting.
     */
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        
        if (myGrid) { //Paints the grid if myGrid is true.
            g2d.setPaint(Color.GRAY);
            for (int row = 0; row < getHeight() / GRID_SPACING; row++) {
                for (int col = 0; col < getWidth() / GRID_SPACING; col++) {
                    final Line2D line = new Line2D.Float(GRID_SPACING 
                                                         + (col * GRID_SPACING), 0,
                                                         GRID_SPACING
                                                         + (col * GRID_SPACING), getHeight());
                    g2d.draw(line);
                }
                final Line2D line = new Line2D.Float(0, GRID_SPACING + (row * GRID_SPACING),
                                getWidth(), GRID_SPACING + (row * GRID_SPACING));
                g2d.draw(line);
            }
           
        }
        
        if (myCurrentShape != null) {
            g2d.setPaint(myCurrentShape.getColor());
            g2d.setStroke(new BasicStroke(myCurrentShape.getWidth()));
            g2d.draw(myCurrentShape.getShape());
        }
        
        
        for (int i = 0; i < (myDrawingArray.size() - myUndoCount); i++) {
            final Drawing drawing = myDrawingArray.get(i);
            if (drawing.getWidth() == 0) {
                continue;
            }
            g2d.setPaint(drawing.getColor());
            g2d.setStroke(new BasicStroke(drawing.getWidth()));
            g2d.draw(drawing.getShape());
        }
    }
    
    /**
     *This method will set the current tool.
     *
     *@param theTool the newly selected tool.
     */
    public void setTool(final Tool theTool) {
        removeMouseListener(myCurrentTool);
        removeMouseMotionListener(myCurrentTool);
        myCurrentTool = theTool;
        addMouseListener(myCurrentTool);
        addMouseMotionListener(myCurrentTool);
    }
    
    /**
     *This method will allow the user to set the color used to paint on this panel.
     *
     *@param theColor This is the new color used.
     */
    public void setColor(final Color theColor) {
        myColor = theColor;
    }
    
    /**
     *This method will allow the menuBar to change the current width.
     *
     *@param theWidth the new width used to draw shapes.
     */
    public void setWidth(final int theWidth) {
        myWidth = theWidth;
    }
    
    /**
     *Allows the tool objects to change the current path drawn.
     *
     *@param theShape The new shape created.
     */
    public void addShape(final Shape theShape) {
        final Drawing newDrawing = new Drawing(theShape, myColor, myWidth);
        if (myDrawingArray.isEmpty()) {
            firePropertyChange("shapeArray", null, "notEmpty");
        }
        myDrawingArray.add(newDrawing);
        System.out.println(myDrawingArray);
        System.out.println(myUndoCount);
        repaint();
    }
    
    /**
     *Allows the tool objects to render a shape temporarily but not save it permanently.
     *
     *@param theShape The shape being displayed.
     */
    public void renderShape(final Shape theShape) {
        final Drawing newDrawing = new Drawing(theShape, myColor, myWidth);
        myCurrentShape = newDrawing;
        repaint();
        
    }
    
    /**
     *This method will allow the undo all button to clear everything off the drawing panel.
     */
    public void undoAll() {
        firePropertyChange("array", null, "empty");
        myDrawingArray.clear();
        repaint();
    }
    
    /**
     *This will allow the user to perform a step undo.
     */
    public void undo() {
        myUndoCount++;
        repaint();
    }
    /**
     *Allows the user to perform a redo step.
     */
    public void redo() {
        myUndoCount--;
        repaint();
    }
    
    /**
     *Allows the menu bar to enable or disable the grid.
     *
     *@param theSelection true if the grid should be displayed.
     */
    public void setGrid(final boolean theSelection) {
        myGrid = theSelection;
        repaint();
    }
}